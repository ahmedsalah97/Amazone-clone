{"version":3,"file":"static/js/181.0fc701a8.chunk.js","mappings":"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","sources":["components/Product/Product.jsx","components/Home/Home.jsx","../node_modules/shortid/index.js","../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport \"./Product.css\";\r\nimport { useAuth } from \"../../context/GlobalState\";\r\n\r\nconst Product = ({ title, price, image, rating, id }) => {\r\n  const { dispatch } = useAuth();\r\n  const addToBasket = () => {\r\n    dispatch({\r\n      type: \"ADD_TO_BASKET\",\r\n      item: {\r\n        id: id,\r\n        image: image,\r\n        price: price,\r\n        title: title,\r\n        price: price,\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"product \">\r\n        <div className=\"product-info\">\r\n          <p>{title}</p>\r\n          <p className=\"product-price\">\r\n            <small>$</small>\r\n            <strong>{price}</strong>\r\n          </p>\r\n        </div>\r\n        <div className=\"product-rating\">\r\n          {Array(rating)\r\n            .fill()\r\n            .map((_, i) => (\r\n              <p key={i}>\r\n                <i className=\"fas fa-star\"></i>\r\n              </p>\r\n            ))}\r\n        </div>\r\n        <img src={image} alt=\"product-img\" />\r\n        <button onClick={addToBasket}>Add to Basket</button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Product;\r\n","import \"./Home.css\";\r\nimport homeImage from \"../../images/home.jpg\";\r\nimport Product from \"../Product/Product\";\r\nimport shortid from \"shortid\";\r\nimport ProductImg1 from \"../../images/products/1.png\";\r\nimport ProductImg2 from \"../../images/products/2.png\";\r\nimport ProductImg3 from \"../../images/products/3.png\";\r\nimport ProductImg4 from \"../../images/products/4.png\";\r\nimport ProductImg5 from \"../../images/products/5.png\";\r\nimport ProductImg6 from \"../../images/products/6.png\";\r\n\r\nexport default function Home() {\r\n  return (\r\n    <>\r\n      <div className=\"home\">\r\n        <div className=\"home-container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-12 mt-0\">\r\n              <img src={homeImage} alt=\"Image-Home\" className=\"home-image\" />\r\n            </div>\r\n          </div>\r\n          <div className=\"products\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-6\">\r\n                <Product\r\n                  id={shortid.generate()}\r\n                  image={ProductImg1}\r\n                  price={64}\r\n                  title=\"Razer Kraken Tournament Edition THX 7.1 Surround Sound Gaming Headset\"\r\n                  rating={5}\r\n                />\r\n              </div>\r\n              <div className=\"col-md-6\">\r\n                <Product\r\n                  id={shortid.generate()}\r\n                  image={ProductImg2}\r\n                  price={682.95}\r\n                  title=\"Lenovo - 2021 - IdeaPad 3 - Gaming Laptop - AMD Ryzen 5 5600H - 8GB RAM - 256GB Storage \"\r\n                  rating={4}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n              <div className=\"col-md-4\">\r\n                <Product\r\n                  id={shortid.generate()}\r\n                  image={ProductImg3}\r\n                  price={449}\r\n                  title=\"Fujitsu ScanSnap iX1600 Wireless or USB High-Speed Cloud Enabled Document, Photo & Receipt \"\r\n                  rating={5}\r\n                />\r\n              </div>\r\n              <div className=\"col-md-4\">\r\n                <Product\r\n                  id={shortid.generate()}\r\n                  image={ProductImg4}\r\n                  price={229}\r\n                  title=\"Meta Quest 2 — Advanced All-In-One Virtual Reality Headset — 128 GB\"\r\n                  rating={3}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"col-md-4\">\r\n                {\" \"}\r\n                <Product\r\n                  id={shortid.generate()}\r\n                  image={ProductImg5}\r\n                  price={239}\r\n                  title=\"MeLE PCG02 Fanless Mini PC Stick Windows 11 Pro J4125 8GB/128GB Portable Mini\"\r\n                  rating={5}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n              <div className=\"col-md-12\">\r\n                <Product\r\n                  id={shortid.generate()}\r\n                  image={ProductImg6}\r\n                  price={(1, 142)}\r\n                  title=\"SAMSUNG Galaxy S22 Ultra Cell Phone, Factory Unlocked Android Smartphone, 128GB, 8K Camera & Video, \"\r\n                  rating={5}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nmodule.exports = 0;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n"],"names":["_ref","title","price","image","rating","id","dispatch","useAuth","_jsx","_Fragment","children","_jsxs","className","Array","fill","map","_","i","src","alt","onClick","addToBasket","type","item","Home","homeImage","Product","shortid","ProductImg1","ProductImg2","ProductImg3","ProductImg4","ProductImg5","ProductImg6","module","exports","alphabet","previousSeed","shuffled","randomFromSeed","require","ORIGINAL","reset","setCharacters","_alphabet_","length","Error","unique","split","filter","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","get","characters","seed","lookup","index","counter","previousSeconds","generate","clusterWorkerId","str","seconds","Date","now","random","format","number","done","loopCounter","pow","build","isValid","seedValue","worker","workerId","newCharacters","undefined","RegExp","replace","test","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","_seed_","mask","log","LN2","step"],"sourceRoot":""}